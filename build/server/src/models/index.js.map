{"version":3,"file":"index.js","names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","console","log","db","sequelize","environment","Sequelize","use_env_variable","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","dialectOption","ssl","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","require","join","DataTypes","name","Object","keys","modelName","associate"],"sources":["../../../../api/server/src/models/index.js"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport configJson from '../config/config';\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV ? process.env.NODE_ENV : 'development';\n\nconst config = configJson[env];\n\nconsole.log('this is the environment: ', env);\n\nconst db = {};\n\nlet sequelize;\nif (config.environment === 'production') {\n    sequelize = new Sequelize(\n        process.env[config.use_env_variable], config\n    );\n    sequelize = new Sequelize(\n        process.env.DB_NAME,\n        process.env.DB_USER,\n        process.env.DB_PASS, {\n            host: process.env.DB_HOST,\n            port: process.env.DB_PORT,\n            dialect: 'postgres',\n            dialectOption: {\n                ssl: true,\n                native: true\n            },\n            logging: true\n        }\n    );\n} else {\n    sequelize = new Sequelize(\n        config.database, config.username, config.password, config\n    );\n}\n\nfs\n    .readdirSync(__dirname)\n    .filter((file) => {\n        return (file.indexOf('.') !== 0) &&\n            (file !== basename) && (file.slice(-3) === '.js');\n    })\n    .forEach((file) => {\n        const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes)\n        db[model.name] = model;\n    });\n\nObject.keys(db).forEach((modelName) => {\n    if (db[modelName].associate) {\n        db[modelName].associate(db);\n    }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAAGC,gBAAA,CAAKD,QAAL,CAAcE,UAAd,CAAjB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,GAAuBD,OAAO,CAACD,GAAR,CAAYE,QAAnC,GAA8C,aAA1D;AAEA,IAAMC,MAAM,GAAGC,kBAAA,CAAWJ,GAAX,CAAf;AAEAK,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCN,GAAzC;AAEA,IAAMO,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIL,MAAM,CAACM,WAAP,KAAuB,YAA3B,EAAyC;EACrCD,SAAS,GAAG,IAAIE,qBAAJ,CACRT,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACQ,gBAAnB,CADQ,EAC8BR,MAD9B,CAAZ;EAGAK,SAAS,GAAG,IAAIE,qBAAJ,CACRT,OAAO,CAACD,GAAR,CAAYY,OADJ,EAERX,OAAO,CAACD,GAAR,CAAYa,OAFJ,EAGRZ,OAAO,CAACD,GAAR,CAAYc,OAHJ,EAGa;IACjBC,IAAI,EAAEd,OAAO,CAACD,GAAR,CAAYgB,OADD;IAEjBC,IAAI,EAAEhB,OAAO,CAACD,GAAR,CAAYkB,OAFD;IAGjBC,OAAO,EAAE,UAHQ;IAIjBC,aAAa,EAAE;MACXC,GAAG,EAAE,IADM;MAEX,UAAQ;IAFG,CAJE;IAQjBC,OAAO,EAAE;EARQ,CAHb,CAAZ;AAcH,CAlBD,MAkBO;EACHd,SAAS,GAAG,IAAIE,qBAAJ,CACRP,MAAM,CAACoB,QADC,EACSpB,MAAM,CAACqB,QADhB,EAC0BrB,MAAM,CAACsB,QADjC,EAC2CtB,MAD3C,CAAZ;AAGH;;AAEDuB,cAAA,CACKC,WADL,CACiBC,SADjB,EAEKC,MAFL,CAEY,UAACC,IAAD,EAAU;EACd,OAAQA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IACFD,IAAI,KAAKjC,QADP,IACqBiC,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAD/C;AAEH,CALL,EAMKC,OANL,CAMa,UAACH,IAAD,EAAU;EACf,IAAMI,KAAK,GAAGC,OAAO,CAACrC,gBAAA,CAAKsC,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAD,CAAP,CAAoCtB,SAApC,EAA+CE,qBAAA,CAAU2B,SAAzD,CAAd;;EACA9B,EAAE,CAAC2B,KAAK,CAACI,IAAP,CAAF,GAAiBJ,KAAjB;AACH,CATL;;AAWAK,MAAM,CAACC,IAAP,CAAYjC,EAAZ,EAAgB0B,OAAhB,CAAwB,UAACQ,SAAD,EAAe;EACnC,IAAIlC,EAAE,CAACkC,SAAD,CAAF,CAAcC,SAAlB,EAA6B;IACzBnC,EAAE,CAACkC,SAAD,CAAF,CAAcC,SAAd,CAAwBnC,EAAxB;EACH;AACJ,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACG,SAAH,GAAeA,qBAAf;eAEeH,E"}